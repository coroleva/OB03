# АГРЕГАЦИЯ
# Этот код реализует два класса — Book и Library, демонстрируя принцип агрегации в ООП,
# где библиотека состоит из нескольких книг. Книги могут существовать в библиотеке
# или могут существовать вне библиотеки.
#
# Класс Book:
#
# Этот класс представляет книгу.
# В конструкторе (__init__) инициализируются два атрибута: title (название книги) и author (автор книги).
# Каждый экземпляр класса Book хранит данные о конкретной книге.
# Класс Library:
#
# Этот класс представляет библиотеку.
# В конструкторе (__init__) создается пустой список books, который предназначен для хранения экземпляров книг.
# Метод add_book принимает объект книги и добавляет его в список books.
# Метод list_books возвращает список всех книг в библиотеке в формате строки, содержащей название книги и имя автора.
# Использование:
#
# Создаются два объекта книги: book1 ("1984" Джорджа Оруэлла) и book2 ("Убить пересмешника" Харпер Ли).
# Создается объект библиотеки library.
# Через метод add_book в библиотеку добавляются обе книги.
# Вызов метода list_books выводит список книг, содержащихся в библиотеке, в виде строк с названием книги и автором.
class Book:
    def __init__(self, title, author):
        self.title = title
        self.author = author

class Library:
    def __init__(self):
        self.books = []  # Список книг как часть библиотеки

    def add_book(self, book):
        self.books.append(book)

    def list_books(self):
        return [f"{book.title} by {book.author}" for book in self.books]

# Использование: книги создаются отдельно
book1 = Book("1984", "George Orwell")
book2 = Book("To Kill a Mockingbird", "Harper Lee")

library = Library()  # создается библиотека (список книг)
#    через метод add_book в библиотеку добавляются обе книги
library.add_book(book1)
library.add_book(book2)
#    вызов метода list_books выводит список книг, содержащихся в библиотеке, в виде строк с названием книги и автором
print(library.list_books())
